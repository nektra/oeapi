/*!
 * \mainpage OEAPI Documentation
 * 
 * \section section1 OEAPI Components:
 *
 * -	oeapiinitcom.dll: Contains the OEAPIINITCOM library. It contains the OEAPIInit ActiveX object that triggers the event OnInitOEAPI when the OE starts running and the event OnShutdownOEAPI when OE shutdowns. Between these two events you can instance any object of OEAPI library (see oecom.idl) without launching OE.
 * 
 * -	oecom.dll: This dll runs in the address space of OE and must be loaded by oehook.dll when OE starts running. If you instance any object of this dll (OEAPI library) you launch OE (see in the demo application what happens if you create a toolbar and OE is not running) as it registers the COM server in the OE. 
 * NOTE: You must release all objects of this library in OnShutdownOEAPI event. Otherwise, this library will not shutdown, the OE (msimn.exe) process will continue running in the background and OE will not be able to load again.
 * 
 * -	oestore.dll: This dll contains OESTORE library that lets you instance the main object OEFolderManager. It lets you use folders and messages. You can use these objects without launching OE.
 * 
 * -	oehook.dll: This dll must be loaded from an application that runs from start-up. It loads oecom.dll when OE is launched. 
 * This dll implements a window hook and is loaded only in OE and the process that loads this dll. To do this, it returns FALSE when other processes try to load it (In NT this cannot be done so it is loaded in all the processes). When a dll returns FALSE in DllMain generates a debug line saying that the dll was loaded first and unloaded after. To prevent this behaviour set the registry key:
 * HKEY_CURRENT_USER\\SOFTWARE\\Nektra\\OEAPI Value: HookAllProcesses REG_DWORD = 1.
 * Setting this value makes the hook dll to be loaded in all the processes and the debug lines are not printed.
 * 
 * -	launcher.exe: It's an application that runs from start-up and just loads oehook.dll. 
 *   
 *<br>
 * \section section2 Deploying OEAPI
 *
 * - <a href="deploying.html">Click here for OEAPI deploying instructions.</a>
 *
 *<br>
 * \section section3 Working with .NET guideline
 *
 * - <a href="dotnet.html">Click here for a guideline to work with .NET.</a>
 *
 *<br>
 * \section section4 About the demo applications:
 * 
 * Demo applications weren't made to test the OEAPI stability, it were written just to show the actual functionality of the library.
 * The OEAPI is the result of long research and development made for several customers. Our knowledge allowed us to create the OEAPI joining all that work in some COM objects.
 * We have achieved an important speed improvement of the library using a lot of information we have learned.
 * For documentation of the methods use the object browser.
 *   
 *<br>   
 * \section section5 About VC++ demo application:
 * 
 * You need to install Comet library before compiling the demo in VC++ (http://www.lambdasoft.dk/comet/download.htm).
 * The application is a full example of the library's features. Objects of the OEAPI library must be instanced when the library is active or you will run OE when CoCreateInstance is called.
 * In the example if you create a toolbar when OE is not running, you will implicitlly run OE.
 * 
 *<br> 
 * \section section6 To use OEAPI from Delphi:
 * 
 * - Select: Project -> Import Type Library.
 * - Select OEAPI in the listbox and press ‘Install’.
 * - Select the tab ‘Into new package’ and choose a name (e.g.: OEAPI).
 * - After building the package do the same with ‘OEAPIINITCOM’ and ‘OESTORE’ but after pressing Install, select ‘Into existing package’ and select the previous created package.
 * - After doing all this OEAPI can be used as any ActiveX control: Remember that when you ‘Connect’ OEAPI library you will implicitly launch OE as it is registered in OE.
 * 
 *<br>
 * \section section7 Functionality:
 * 
 * Local folders:
 * - Only local folders are supported at the moment.
 * 
 * Identities:
 * - To handle identities it is important to force reload of OESTORE library during the OnInitOEAPI event of the OEAPIINITCOM library. To be able to do this <strong>you need to release all the objects of OESTORE library first</strong>.
 * See how this is handled in demo applications.
 *   
 *<br>   
 * \section section8 About OEAPI Source Code:
 * 
 * OEAPI source code can be bought for U$999.
 * To compile OEAPI you need to download and install Comet library (http://www.lambdasoft.dk/comet/download.htm). If you get errors verify if you have already installed Microsoft SDK.
 * 
 * 
 *
 * \page Deploying Deploying OEAPI
 *
 *<br>
 * The objects of OEAPI library run inside the address space of Outlook Express, so it is necessary to make a hook and a launcher to install them.
 *
 * \section section9 1. Using launcher.exe: 
 *
 *	The easiest way is to do as it comes in the Demo application (this installation is the same that is used in the .msi file):
 *
 *    - launcher.exe must be executed when the user logs in, so you can put it in the registry key:
 *      SOFTWARE/Microsoft/Windows/CurrentVersion/Run
 *      OEAPI = {launcher.exe path}
 *    - Copy oehook.dll in the same path of launcher.exe.
 *    - Copy oecom.dll in the same path of oehook.dll (to load oecom.dll, oehook.dll uses it's path).
 *    - Copy oeapiinitcom.dll in the same path.
 *    - Copy oestore.dll in any path.
 *    - Register oeapiinitcom.dll.
 *    - Register oestore.dll.
 *    - Register oecom.dll.
 *
 *<br>
 * \section section10 2. Not using launcher.exe: 
 *
 * If you run another exe program that runs from start-up as launcher.exe you can do this:
 *
 * NOTE: When the exe program is not running the OE part of the plug-in (OEAPI library) will not work, so be sure that your program is running always that you want to use the OEAPI library and before OE is launched.
 *
 *    - Copy oehook.dll in the same path of your application.
 *    - Copy oecom in the same path of oehook.dll (to load oecom.dll, oehook.dll uses its path).
 *    - Copy oeapiinitcom.dll in any path.
 *    - Copy oestore.dll in any path.
 *    - Register oeapiinitcom.dll.
 *    - Register oestore.dll.
 *    - Register oecom.dll.
 *    - Call LoadLibrary ("oehook.dll") from your application.
 *
 *<br>
 * \section section11 Plug-in Installation:
 *
 * You can install your OE Plug-in in the address space of Outlook Express.
 *
 * Instructions:
 *
 *    - Create the Registry Key:
 *      - HKEY_LOCAL_MACHINE/SOFTWARE/Nektra/OEAPI/Plugins or : 
 *      - HKEY_CURRENT_USER/SOFTWARE/Nektra/OEAPI/Plugins
 *
 *    - Specify the plug-in in VC++ or any language that lets the programmer export functions in dlls:
 *      - Create a new entry in that key, and set the full path of the dll as the value data.
 *      - Implement the function (if needed):
 *      VOID WINAPI InitializePlugin(): it will be called when the plug-in is loaded.
 *
 *    - Specify the plug-in in COM (specially Visual Basic)::
 *      - Specify the Class name that you want to instance (e.g.: Project1.Class1) equivalent to the string used as parameter of CreateObject function in VB (e.g.: CreateObject("Excel.Application")).
 *
 *
 *
 * \page dotNET .NET Guideline
 *
 * <br>
 *
 * - The best way to work is having the least amount possible of references to OEAPI objects.<br><br>
 * - It is better to use one OEAPIObj using the objects' IDs (i.e. toolbars, buttons, menu items, folders, messages IDs).<br><br>
 * - As soon as a OEToolbar, OEButton, OEFolder, etc. is no longer used, assign null/nothing to it.<br><br>
 * - By a mailer's limitation, it is better to have the least amount possible of references to OEFolder objects.<br><br>
 * - On OnShutDownOEAPI release <b>every</b> OEAPI object except OEAPIInit, and, at the end, call for the Garbage Collector twice:<br><br>
 * GC.Collect()<br>
 * GC.WaitForPendingFinalizers()<br>
 * GC.Collect()<br>
 * GC.WaitForPendingFinalizers()<br><br>
 * - Do not call ReleaseComObject for OEAPI objects, unless its imperative.<br><br>
 * - If an object (i.e. inbox) is to be used frequently, it is better to have a reference to the object, than working with it's ID.<br><br>
 * - If an object (i.e. toolbar) is to be used sporadically, it is better to obtain the object by it's ID using OEAPIObj.<br><br>
 *
 */